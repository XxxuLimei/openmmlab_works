{"env_info": "sys.platform: linux\nPython: 3.9.13 (main, Aug 25 2022, 23:26:10) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX TITAN X\nCUDA_HOME: :/usr/local/cuda-11.2:/usr/local/cuda-11.2\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.6.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = './data/balloon'\nCLASSES = ('balloon', )\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='./data/balloon/train/annotation_coco.json',\n        img_prefix='./data/balloon/train',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='./data/balloon/val/annotation_coco.json',\n        img_prefix='./data/balloon/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='./data/balloon/val/annotation_coco.json',\n        img_prefix='./data/balloon/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.0001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=25, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1844726928, "exp_name": "balloon.py"}
{"mode": "train", "epoch": 1, "iter": 25, "lr": 5e-05, "memory": 3809, "data_time": 0.09507, "loss_rpn_cls": 0.06465, "loss_rpn_bbox": 0.01559, "loss_cls": 0.70703, "acc": 48.39453, "loss_bbox": 0.28164, "loss_mask": 6.02659, "loss": 7.0955, "time": 0.61894}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.0123, "bbox_mAP_50": 0.0265, "bbox_mAP_75": 0.0099, "bbox_mAP_s": 0.0013, "bbox_mAP_m": 0.0294, "bbox_mAP_l": 0.0124, "bbox_mAP_copypaste": "0.0123 0.0265 0.0099 0.0013 0.0294 0.0124", "segm_mAP": 0.0185, "segm_mAP_50": 0.0303, "segm_mAP_75": 0.023, "segm_mAP_s": 0.0023, "segm_mAP_m": 0.0215, "segm_mAP_l": 0.0306, "segm_mAP_copypaste": "0.0185 0.0303 0.0230 0.0023 0.0215 0.0306"}
{"mode": "train", "epoch": 2, "iter": 25, "lr": 0.00011, "memory": 3894, "data_time": 0.09398, "loss_rpn_cls": 0.05263, "loss_rpn_bbox": 0.01528, "loss_cls": 0.30312, "acc": 92.22266, "loss_bbox": 0.27638, "loss_mask": 0.24889, "loss": 0.8963, "time": 0.62366}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00012, "bbox_mAP": 0.1105, "bbox_mAP_50": 0.1626, "bbox_mAP_75": 0.12, "bbox_mAP_s": 0.0016, "bbox_mAP_m": 0.1225, "bbox_mAP_l": 0.1244, "bbox_mAP_copypaste": "0.1105 0.1626 0.1200 0.0016 0.1225 0.1244", "segm_mAP": 0.135, "segm_mAP_50": 0.1687, "segm_mAP_75": 0.1549, "segm_mAP_s": 0.0023, "segm_mAP_m": 0.0828, "segm_mAP_l": 0.3362, "segm_mAP_copypaste": "0.1350 0.1687 0.1549 0.0023 0.0828 0.3362"}
{"mode": "train", "epoch": 3, "iter": 25, "lr": 0.00017, "memory": 3894, "data_time": 0.09629, "loss_rpn_cls": 0.02031, "loss_rpn_bbox": 0.01187, "loss_cls": 0.23362, "acc": 90.75, "loss_bbox": 0.34201, "loss_mask": 0.14697, "loss": 0.75478, "time": 0.6653}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00018, "bbox_mAP": 0.6082, "bbox_mAP_50": 0.7647, "bbox_mAP_75": 0.7168, "bbox_mAP_s": 0.0151, "bbox_mAP_m": 0.5464, "bbox_mAP_l": 0.6672, "bbox_mAP_copypaste": "0.6082 0.7647 0.7168 0.0151 0.5464 0.6672", "segm_mAP": 0.6887, "segm_mAP_50": 0.7652, "segm_mAP_75": 0.7628, "segm_mAP_s": 0.0162, "segm_mAP_m": 0.5715, "segm_mAP_l": 0.7911, "segm_mAP_copypaste": "0.6887 0.7652 0.7628 0.0162 0.5715 0.7911"}
{"mode": "train", "epoch": 4, "iter": 25, "lr": 0.00023, "memory": 3894, "data_time": 0.0933, "loss_rpn_cls": 0.01886, "loss_rpn_bbox": 0.01061, "loss_cls": 0.1916, "acc": 90.19141, "loss_bbox": 0.36023, "loss_mask": 0.11527, "loss": 0.69657, "time": 0.68558}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00025, "bbox_mAP": 0.6425, "bbox_mAP_50": 0.8209, "bbox_mAP_75": 0.7723, "bbox_mAP_s": 0.0316, "bbox_mAP_m": 0.6072, "bbox_mAP_l": 0.7005, "bbox_mAP_copypaste": "0.6425 0.8209 0.7723 0.0316 0.6072 0.7005", "segm_mAP": 0.7464, "segm_mAP_50": 0.821, "segm_mAP_75": 0.8175, "segm_mAP_s": 0.0376, "segm_mAP_m": 0.6468, "segm_mAP_l": 0.8159, "segm_mAP_copypaste": "0.7464 0.8210 0.8175 0.0376 0.6468 0.8159"}
{"mode": "train", "epoch": 5, "iter": 25, "lr": 0.0003, "memory": 3894, "data_time": 0.09878, "loss_rpn_cls": 0.01444, "loss_rpn_bbox": 0.01205, "loss_cls": 0.16065, "acc": 93.3125, "loss_bbox": 0.36724, "loss_mask": 0.10597, "loss": 0.66036, "time": 0.69723}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00031, "bbox_mAP": 0.6829, "bbox_mAP_50": 0.8441, "bbox_mAP_75": 0.8262, "bbox_mAP_s": 0.0884, "bbox_mAP_m": 0.6338, "bbox_mAP_l": 0.7352, "bbox_mAP_copypaste": "0.6829 0.8441 0.8262 0.0884 0.6338 0.7352", "segm_mAP": 0.7621, "segm_mAP_50": 0.8431, "segm_mAP_75": 0.8411, "segm_mAP_s": 0.053, "segm_mAP_m": 0.6769, "segm_mAP_l": 0.8234, "segm_mAP_copypaste": "0.7621 0.8431 0.8411 0.0530 0.6769 0.8234"}
{"mode": "train", "epoch": 6, "iter": 25, "lr": 0.00036, "memory": 3894, "data_time": 0.09709, "loss_rpn_cls": 0.01474, "loss_rpn_bbox": 0.01113, "loss_cls": 0.11177, "acc": 96.21875, "loss_bbox": 0.28425, "loss_mask": 0.08841, "loss": 0.51031, "time": 0.69563}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00037, "bbox_mAP": 0.7273, "bbox_mAP_50": 0.8721, "bbox_mAP_75": 0.8405, "bbox_mAP_s": 0.2762, "bbox_mAP_m": 0.7028, "bbox_mAP_l": 0.7694, "bbox_mAP_copypaste": "0.7273 0.8721 0.8405 0.2762 0.7028 0.7694", "segm_mAP": 0.7799, "segm_mAP_50": 0.8612, "segm_mAP_75": 0.8585, "segm_mAP_s": 0.0796, "segm_mAP_m": 0.7151, "segm_mAP_l": 0.8317, "segm_mAP_copypaste": "0.7799 0.8612 0.8585 0.0796 0.7151 0.8317"}
{"mode": "train", "epoch": 7, "iter": 25, "lr": 0.00042, "memory": 3894, "data_time": 0.09653, "loss_rpn_cls": 0.01143, "loss_rpn_bbox": 0.01101, "loss_cls": 0.0876, "acc": 97.08984, "loss_bbox": 0.1793, "loss_mask": 0.09943, "loss": 0.38876, "time": 0.69921}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00043, "bbox_mAP": 0.7508, "bbox_mAP_50": 0.8993, "bbox_mAP_75": 0.8589, "bbox_mAP_s": 0.2273, "bbox_mAP_m": 0.6874, "bbox_mAP_l": 0.7959, "bbox_mAP_copypaste": "0.7508 0.8993 0.8589 0.2273 0.6874 0.7959", "segm_mAP": 0.7991, "segm_mAP_50": 0.8821, "segm_mAP_75": 0.8781, "segm_mAP_s": 0.137, "segm_mAP_m": 0.7226, "segm_mAP_l": 0.8475, "segm_mAP_copypaste": "0.7991 0.8821 0.8781 0.1370 0.7226 0.8475"}
{"mode": "train", "epoch": 8, "iter": 25, "lr": 0.00048, "memory": 3894, "data_time": 0.09507, "loss_rpn_cls": 0.00912, "loss_rpn_bbox": 0.00961, "loss_cls": 0.07291, "acc": 97.46484, "loss_bbox": 0.11595, "loss_mask": 0.10018, "loss": 0.30778, "time": 0.70749}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00049, "bbox_mAP": 0.7768, "bbox_mAP_50": 0.9181, "bbox_mAP_75": 0.8523, "bbox_mAP_s": 0.3005, "bbox_mAP_m": 0.7245, "bbox_mAP_l": 0.8242, "bbox_mAP_copypaste": "0.7768 0.9181 0.8523 0.3005 0.7245 0.8242", "segm_mAP": 0.8237, "segm_mAP_50": 0.8959, "segm_mAP_75": 0.8917, "segm_mAP_s": 0.2548, "segm_mAP_m": 0.7507, "segm_mAP_l": 0.8708, "segm_mAP_copypaste": "0.8237 0.8959 0.8917 0.2548 0.7507 0.8708"}
{"mode": "train", "epoch": 9, "iter": 25, "lr": 0.00054, "memory": 3894, "data_time": 0.09524, "loss_rpn_cls": 0.00719, "loss_rpn_bbox": 0.00831, "loss_cls": 0.06832, "acc": 97.60547, "loss_bbox": 0.09194, "loss_mask": 0.08383, "loss": 0.25959, "time": 0.70184}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00056, "bbox_mAP": 0.798, "bbox_mAP_50": 0.9157, "bbox_mAP_75": 0.8845, "bbox_mAP_s": 0.569, "bbox_mAP_m": 0.7401, "bbox_mAP_l": 0.8472, "bbox_mAP_copypaste": "0.7980 0.9157 0.8845 0.5690 0.7401 0.8472", "segm_mAP": 0.8111, "segm_mAP_50": 0.8939, "segm_mAP_75": 0.8898, "segm_mAP_s": 0.1791, "segm_mAP_m": 0.7317, "segm_mAP_l": 0.8598, "segm_mAP_copypaste": "0.8111 0.8939 0.8898 0.1791 0.7317 0.8598"}
{"mode": "train", "epoch": 10, "iter": 25, "lr": 0.00061, "memory": 3933, "data_time": 0.09486, "loss_rpn_cls": 0.00557, "loss_rpn_bbox": 0.00679, "loss_cls": 0.05491, "acc": 98.10156, "loss_bbox": 0.07273, "loss_mask": 0.07224, "loss": 0.21225, "time": 0.68866}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.78, "bbox_mAP_50": 0.9165, "bbox_mAP_75": 0.8873, "bbox_mAP_s": 0.4865, "bbox_mAP_m": 0.7374, "bbox_mAP_l": 0.8224, "bbox_mAP_copypaste": "0.7800 0.9165 0.8873 0.4865 0.7374 0.8224", "segm_mAP": 0.8108, "segm_mAP_50": 0.8949, "segm_mAP_75": 0.8913, "segm_mAP_s": 0.4512, "segm_mAP_m": 0.7346, "segm_mAP_l": 0.8557, "segm_mAP_copypaste": "0.8108 0.8949 0.8913 0.4512 0.7346 0.8557"}
